{"version":3,"sources":["webpack:///webpack/bootstrap 65d459dbce462ce8e71c","webpack:///./src/background.js","webpack:///./src/types.js"],"names":["API_CLIENT_ID","ONLINE_CONTENT","message","src","OFFLINE_CONTENT","STREAM_NAME","API_ENDPOINT","REQUEST_INTERVAL","currentContent","ui","stream","undefined","sendStatus","chrome","runtime","sendMessage","type","SEND_STREAM_STATUS","value","getStreamStatus","headers","Headers","append","fetch","then","res","json","main","data","setTimeout","length","browserAction","setIcon","path","onMessage","addListener","GET_STREAM_STATUS"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACtCA;;AAGA,KAAMA,gBAAgB,gCAAtB;;AAEA,KAAMC,iBAAiB;AACrBC,YAAS,yBADY;AAErBC,QAAK;AAFgB,EAAvB;;AAKA,KAAMC,kBAAkB;AACtBF,YAAS,qBADa;AAEtBC,QAAK;AAFiB,EAAxB;;AAKA,KAAME,cAAc,YAApB;;AAEA,KAAMC,mEAAiED,WAAvE;;AAEA,KAAME,mBAAmB,KAAzB;;AAEA,KAAIC,iBAAiB;AACnBC,OAAIL,eADe;AAEnBM,WAAQC;AAFW,EAArB;;AAKA,UAASC,UAAT,GAAsB;AACpBC,UAAOC,OAAP,CAAeC,WAAf,CAA2B;AACzBC,WAAMC,yBADmB;AAEzBC,YAAOV;AAFkB,IAA3B;AAIA,UAAOA,cAAP;AACD;;AAED,UAASW,eAAT,GAA2B;AACzB,OAAMC,UAAU,IAAIC,OAAJ,EAAhB;AACAD,WAAQE,MAAR,CAAe,WAAf,EAA4BtB,aAA5B;;AAEA,UAAOuB,MAAMjB,YAAN,EAAoB,EAAEc,gBAAF,EAApB,EAAiCI,IAAjC,CAAsC;AAAA,YAAOC,IAAIC,IAAJ,EAAP;AAAA,IAAtC,CAAP;AACD;;AAED,UAASC,IAAT,GAAgB;AACdR,qBAAkBK,IAAlB,CAAuB,gBAAc;AAAA,SAAXI,IAAW,QAAXA,IAAW;;AACnCC,gBAAWF,IAAX,EAAiBpB,gBAAjB;AACAC,sBAAiB;AACfE,eAAQkB,KAAK,CAAL,CADO;AAEfnB,WAAImB,KAAKE,MAAL,GAAc,CAAd,GAAkB7B,cAAlB,GAAmCG;AAFxB,MAAjB;AAIAS,YAAOkB,aAAP,CAAqBC,OAArB,CAA6B,EAAEC,MAAMzB,eAAeC,EAAf,CAAkBN,GAA1B,EAA7B;AACAS;AACD,IARD;AASD;;AAGDe;;AAEAd,QAAOC,OAAP,CAAeoB,SAAf,CAAyBC,WAAzB,CAAqC,iBAAc;AAAA,OAAXnB,IAAW,SAAXA,IAAW;;AACjD,OAAIA,SAASoB,wBAAb,EAAgC;AAC9BxB;AACD;AACD,UAAO,IAAP;AACD,EALD,E;;;;;;;;;;;ACxDO,KAAMwB,gDAAoB,mBAA1B;;AAEA,KAAMnB,kDAAqB,oBAA3B,C","file":"build/background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 65d459dbce462ce8e71c","import { GET_STREAM_STATUS, SEND_STREAM_STATUS } from './types';\n\n\nconst API_CLIENT_ID = '047hyh2gfli6kv04oeuz4idpx4bzir';\n\nconst ONLINE_CONTENT = {\n  message: 'BinoLeDino est en ligne',\n  src: 'icons/112x112/BinoWave.png',\n};\n\nconst OFFLINE_CONTENT = {\n  message: 'Le live est fini :(',\n  src: 'icons/112x112/BinoCry.png',\n};\n\nconst STREAM_NAME = 'binoledino';\n\nconst API_ENDPOINT = `https://api.twitch.tv/helix/streams?user_login=${STREAM_NAME}`;\n\nconst REQUEST_INTERVAL = 60000;\n\nlet currentContent = {\n  ui: OFFLINE_CONTENT,\n  stream: undefined,\n};\n\nfunction sendStatus() {\n  chrome.runtime.sendMessage({\n    type: SEND_STREAM_STATUS,\n    value: currentContent,\n  });\n  return currentContent;\n}\n\nfunction getStreamStatus() {\n  const headers = new Headers();\n  headers.append('Client-ID', API_CLIENT_ID);\n\n  return fetch(API_ENDPOINT, { headers }).then(res => res.json());\n}\n\nfunction main() {\n  getStreamStatus().then(({ data }) => {\n    setTimeout(main, REQUEST_INTERVAL);\n    currentContent = {\n      stream: data[0],\n      ui: data.length > 0 ? ONLINE_CONTENT : OFFLINE_CONTENT,\n    };\n    chrome.browserAction.setIcon({ path: currentContent.ui.src });\n    sendStatus();\n  });\n}\n\n\nmain();\n\nchrome.runtime.onMessage.addListener(({ type }) => {\n  if (type === GET_STREAM_STATUS) {\n    sendStatus();\n  }\n  return true;\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/background.js","export const GET_STREAM_STATUS = 'get_stream_status';\n\nexport const SEND_STREAM_STATUS = 'send_stream_status';\n\n\n\n// WEBPACK FOOTER //\n// ./src/types.js"],"sourceRoot":""}