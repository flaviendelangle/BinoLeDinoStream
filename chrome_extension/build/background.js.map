{"version":3,"sources":["webpack:///webpack/bootstrap 0e0bed50abc1f0731404","webpack:///./src/background.js","webpack:///./src/types.js"],"names":["API_CLIENT_ID","ONLINE_CONTENT","message","src","OFFLINE_CONTENT","STREAM_NAME","API_ENDPOINT","REQUEST_INTERVAL","currentContent","updateUI","isOnline","chrome","browserAction","setIcon","path","getStreamStatus","headers","Headers","append","fetch","then","res","json","main","data","setTimeout","length","console","log","runtime","onMessage","addListener","request","sender","sendResponse","GET_STREAM_STATUS"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;;;;;;;;;;;ACtCA;;AAGA,KAAMA,gBAAgB,gCAAtB;;AAEA,KAAMC,iBAAiB;AACrBC,YAAS,yBADY;AAErBC,QAAK;AAFgB,EAAvB;;AAKA,KAAMC,kBAAkB;AACtBF,YAAS,qBADa;AAEtBC,QAAK;AAFiB,EAAxB;;AAKA,KAAME,cAAc,YAApB;;AAEA,KAAMC,mEAAiED,WAAvE;;AAEA,KAAME,mBAAmB,KAAzB;;AAEA,KAAIC,iBAAiBJ,eAArB;;AAEA,UAASK,QAAT,GAAoC;AAAA,OAAlBC,QAAkB,uEAAP,KAAO;;AAClCF,oBAAiBE,WAAWT,cAAX,GAA4BG,eAA7C;AACAO,UAAOC,aAAP,CAAqBC,OAArB,CAA6B,EAAEC,MAAMN,eAAeL,GAAvB,EAA7B;AACD;;AAED,UAASY,eAAT,GAA2B;AACzB,OAAMC,UAAU,IAAIC,OAAJ,EAAhB;AACAD,WAAQE,MAAR,CAAe,WAAf,EAA4BlB,aAA5B;;AAEA,UAAOmB,MAAMb,YAAN,EAAoB,EAAEU,gBAAF,EAApB,EAAiCI,IAAjC,CAAsC;AAAA,YAAOC,IAAIC,IAAJ,EAAP;AAAA,IAAtC,CAAP;AACD;;AAED,UAASC,IAAT,GAAgB;AACdR,qBAAkBK,IAAlB,CAAuB,gBAAc;AAAA,SAAXI,IAAW,QAAXA,IAAW;;AACnCC,gBAAWF,IAAX,EAAiBhB,gBAAjB;AACAE,cAASe,KAAKE,MAAL,GAAc,CAAvB;AACAC,aAAQC,GAAR,CAAYJ,KAAKE,MAAL,GAAc,QAAd,GAAyB,QAArC;AACD,IAJD;AAKD;;AAGDH;;AAEAZ,QAAOkB,OAAP,CAAeC,SAAf,CAAyBC,WAAzB,CAAqC,UAACC,OAAD,EAAUC,MAAV,EAAkBC,YAAlB,EAAmC;AACtE,OAAIF,YAAYG,wBAAhB,EAAmC;AACjCD,kBAAa1B,cAAb;AACD,IAFD,MAEO;AACL0B,kBAAa,IAAb;AACH;AACC,UAAO,IAAP;AACD,EAPD,E;;;;;;;;;;;AC9CO,KAAMC,gDAAoB,mBAA1B,C","file":"build/background.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0e0bed50abc1f0731404","import { GET_STREAM_STATUS } from './types';\r\n\r\n\r\nconst API_CLIENT_ID = \"047hyh2gfli6kv04oeuz4idpx4bzir\";\r\n\r\nconst ONLINE_CONTENT = {\r\n  message: 'BinoLeDino est en ligne',\r\n  src: 'icons/112x112/BinoWave.png',\r\n};\r\n\r\nconst OFFLINE_CONTENT = {\r\n  message: 'Le live est fini :(',\r\n  src: 'icons/112x112/BinoCry.png',\r\n};\r\n\r\nconst STREAM_NAME = 'binoledino';\r\n\r\nconst API_ENDPOINT = `https://api.twitch.tv/helix/streams?user_login=${STREAM_NAME}`;\r\n\r\nconst REQUEST_INTERVAL = 60000;\r\n\r\nlet currentContent = OFFLINE_CONTENT\r\n\r\nfunction updateUI(isOnline = false) {\r\n  currentContent = isOnline ? ONLINE_CONTENT : OFFLINE_CONTENT\r\n  chrome.browserAction.setIcon({ path: currentContent.src })\r\n}\r\n\r\nfunction getStreamStatus() {\r\n  const headers = new Headers();\r\n  headers.append('Client-ID', API_CLIENT_ID);\r\n\r\n  return fetch(API_ENDPOINT, { headers }).then(res => res.json())\r\n}\r\n\r\nfunction main() {\r\n  getStreamStatus().then(({ data }) => {\r\n    setTimeout(main, REQUEST_INTERVAL)\r\n    updateUI(data.length > 0)\r\n    console.log(data.length ? 'ONLINE' : 'ONLINE')\r\n  })\r\n}\r\n\r\n\r\nmain()\r\n\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n  if (request === GET_STREAM_STATUS) {\r\n    sendResponse(currentContent);\r\n  } else {\r\n    sendResponse(null);\r\n}\r\n  return true;\r\n});\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/background.js","export const GET_STREAM_STATUS = 'get_stream_status'\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/types.js"],"sourceRoot":""}